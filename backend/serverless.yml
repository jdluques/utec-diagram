org: jdluques
service: utec-diagrams

provider:
  name: aws
  runtime: python3.12
  region: ${env:AWS_REGION}
  environment:
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    AWS_REGION: ${env:AWS_REGION, 'us-east-1'}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    DYNAMODB_TABLE_FILES: ${env:DYNAMODB_TABLE_FILES}
    DYNAMODB_TABLE_FILE_COUNTERS: ${env:DYNAMODB_TABLE_FILE_COUNTERS}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:*
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_TABLE_FILES}"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${env:DYNAMODB_TABLE_FILE_COUNTERS}"

package:
  individually: true

plugins:
  - serverless-dotenv-plugin
  - serverless-python-requirements

custom:
  dotenv:
    path: .env

functions:
  erDiagramGenerator:
    handler: lambdas.create-er-diagram.handler.lambda_handler
    package:
      include:
        - lambdas/er-diagram/**
        - utils/**
        - db/**
    layers:
      - {Ref: CommonUtilsLayer}
    events:
      - http:
          path: diagrams/er
          method: post
  awsDiagramGenerator:
    handler: lambdas.create-aws-diagram.handler.lambda_handler
    package:
      include:
        - lambdas/aws-diagram/**
        - utils/**
        - db/**
    layers:
      - {Ref: CommonUtilsLayer}
    events:
      - http:
          path: diagrams/aws
          method: post
  jsonDiagramGenerator:
    handler: lambdas.create-json-diagram.handler.lambda_handler
    package:
      include:
        - lambdas/json-diagram/**
    events:
      - http:
          path: /diagrams/json
          method: post
  getImageUrl:
    handler: lambdas.get-image-url.handler.lambda_handler
    package:
      include:
        -lambdas/get-image-url/**
    events:
      - http:
          path: files/{fileId}/image-url
          method: get
          request:
            parameters:
              paths:
                fileId: true
  getFileHistory:
    handler: lambdas.get-file-history.handler.lambda_handler
    package:
      include:
        -lambdas/get-file-history/**
    events:
      - http:
          path: files/{fileId}/history
          method: get
          request:
            parameters:
              paths:
                fileId: true
  restoreFileVersion:
    handler: lambdas.restore-file-version.handler.lambda_handler
    package:
      include:
        -lambdas/restore-file-version/**
    events:
      - http:
          path: files/{fileId}/history/restore
          method: patch
          request:
            parameters:
              paths:
                fileId: true

layers:
  commonUtilsLayer:
    path: backend/layers/common
    compatibleRuntimes:
      - python3.12

resources:
  Resources:
    FilesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${env:DYNAMODB_TABLE_FILES}
        AttributeDefinitions:
          - AttributeName: "tenantId"
            AttributeType: "S"
          - AttributeName: "fileId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "tenantId"
            KeyType: "HASH"
          - AttributeName: "fileId"
            KeyType: "RANGE"
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: "DiagramTypeIndex"
            KeySchema:
              - AttributeName: "diagramType"
                KeyType: "HASH"
              - AttributeName: "tenantId"
                KeyType: "RANGE"
            Projection:
              ProjectionType: "ALL"

    FileCountersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${env:DYNAMODB_TABLE_FILE_COUNTERS}
        AttributeDefinitions:
          - AttributeName: "tenantId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "tenantId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
